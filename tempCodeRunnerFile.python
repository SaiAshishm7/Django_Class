from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization, Activation
from keras.constraints import maxnorm
from keras.utils import np_utils
from keras.datasets import cifar10

# Load dataset
(m_train, n_train), (m_test, n_test) = cifar10.load_data()

# Data preprocessing
m_train = m_train.astype('float32')
m_test = m_test.astype('float32')
m_train = m_train / 255.0
m_test = m_test / 255.0
n_train = np_utils.to_categorical(n_train)
n_test = np_utils.to_categorical(n_test)

# Model definition
model = Sequential()
model.add(Conv2D(32, (4, 4), input_shape=m_train.shape[1:], padding='same'))
model.add(Activation('relu'))
model.add(Dropout(0.4))
model.add(BatchNormalization())

# Add more layers and define the final output
model.add(Flatten())
model.add(Dense(256, kernel_constraint=maxnorm(3)))
model.add(Activation('relu'))
model.add(Dense(n_test.shape[1]))
model.add(Activation('softmax'))

# Compile and train the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(m_train, n_train, validation_data=(m_test, n_test), epochs=25, batch_size=64)

# Evaluate model
scores = model.evaluate(m_test, n_test, verbose=0)
print("Accuracy: %.2f%%" % (scores[1]*100))
